{
  "src/__experimental__/components/select/option.component.js": [
    {
      "description": "",
      "displayName": "Option",
      "methods": [],
      "props": {
        "text": {
          "type": {
            "name": "string"
          },
          "required": true,
          "description": "The option's visible text, displayed within <Textbox> of <Select>, and used for filtering"
        },
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "Optional: alternative rendered content, displayed within <SelectList> of <Select> (eg: an icon, an image, etc)"
        },
        "value": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "object"
              },
              {
                "name": "string"
              }
            ]
          },
          "required": true,
          "description": "The option's invisible internal value"
        },
        "options": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "if defined, this object can be used to provide optional extra properties"
        }
      }
    }
  ],
  "src/__experimental__/components/select/select-list.component.js": [
    {
      "description": "",
      "displayName": "SelectList",
      "methods": [
        {
          "name": "positionList",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": null
        },
        {
          "name": "itemId",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "{ value, text, options }",
              "type": null
            }
          ],
          "returns": null
        },
        {
          "name": "noResultsText",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "value",
              "type": null
            }
          ],
          "returns": null
        },
        {
          "name": "filter",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "value",
              "type": null
            },
            {
              "name": "filter",
              "type": null
            }
          ],
          "returns": null
        },
        {
          "name": "highlightMatches",
          "docblock": "Find and highlights search terms in text",
          "modifiers": [],
          "params": [
            {
              "name": "optionText"
            },
            {
              "name": "value"
            }
          ],
          "returns": null,
          "description": "Find and highlights search terms in text"
        }
      ],
      "props": {
        "id": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "The ID for the parent <div>"
        },
        "alwaysHighlight": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Ensure that there's always a highlighted option?"
        },
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "Child components (such as <Option>) for the <ScrollableList>"
        },
        "customFilter": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "A custom function to filter the children. Its interface is (text, filter, value) => boolean"
        },
        "filterValue": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "The value to filter the children by"
        },
        "isLoopable": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Flag to indicite whether select list is loopable while traversing using up and down keys"
        },
        "onLazyLoad": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "A custom callback for when more data needs to be lazy-loaded when the user scrolls the dropdown menu list"
        },
        "onMouseDown": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "A custom callback for the parent <div>'s MouseDown event"
        },
        "onMouseEnter": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "A custom callback for the parent <div>'s MouseEnter event"
        },
        "onMouseLeave": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "A custom callback for the parent <div>'s MouseLeave event"
        },
        "onSelect": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "A callback for when a child is selected"
        },
        "target": {
          "type": {
            "name": "object"
          },
          "required": false,
          "description": "Target DOM element to position the dropdown menu list relative to"
        }
      }
    }
  ],
  "src/__experimental__/components/select/select.component.js": [
    {
      "description": "Basic example:\n\n  <Select>\n    <Option text='Approve' />\n    <Option text='Configure' />\n    <Option text='Deny' />\n  </Select>\n\nCustom JSX:\n\n  <Select>\n    <Option text='Approve'><Icon type='tick' /></Option>\n    <Option text='Configure'><Icon type='settings' /></Option>\n    <Option text='Deny'><Icon type='cross' /></Option>\n  </Select>",
      "displayName": "Select",
      "methods": [
        {
          "name": "getInitialStateValue",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": null
        },
        {
          "name": "assignInput",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "input",
              "type": null
            }
          ],
          "returns": null
        },
        {
          "name": "blockBlur",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": null
        },
        {
          "name": "unblockBlur",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": null
        },
        {
          "name": "handleBlur",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": null
        },
        {
          "name": "handleFocus",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "ev",
              "type": null
            }
          ],
          "returns": null
        },
        {
          "name": "handleMouseEnter",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": null
        },
        {
          "name": "handleMouseLeave",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": null
        },
        {
          "name": "handleClick",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": null
        },
        {
          "name": "verifyControlledIntegrity",
          "docblock": "Verifies the integrity of the props `enableMultiSelect` and `value` (if this component is currently controlled).\n`invariant()` will throw an error if verification fails.",
          "modifiers": [],
          "params": [],
          "returns": null,
          "description": "Verifies the integrity of the props `enableMultiSelect` and `value` (if this component is currently controlled).\n`invariant()` will throw an error if verification fails."
        },
        {
          "name": "isMultiSelectEnabled",
          "docblock": "Is the component currently in multi-select mode? (If not, then it's in single-select mode.)",
          "modifiers": [],
          "params": [],
          "returns": null,
          "description": "Is the component currently in multi-select mode? (If not, then it's in single-select mode.)"
        },
        {
          "name": "getValue",
          "docblock": "Gets this component's current value.\nThis will be either a string (single-select mode) or an array of strings (multi-select mode).",
          "modifiers": [],
          "params": [],
          "returns": null,
          "description": "Gets this component's current value.\nThis will be either a string (single-select mode) or an array of strings (multi-select mode)."
        },
        {
          "name": "getMultiSelectValues",
          "docblock": "Gets this component's current multi-select values.\nShould only be called when the component is in multi-select mode.",
          "modifiers": [],
          "params": [],
          "returns": null,
          "description": "Gets this component's current multi-select values.\nShould only be called when the component is in multi-select mode."
        },
        {
          "name": "handleChange",
          "docblock": "This handler is attached to `SelectList.onSelect()`, which is attached to `ScrollableList.onSelect()`,\nwhich passes `selectedItem.props.id` as the parameter to this handler.\n\n`selectedItem` is a <ScrollableListItem> instance, and its `id` prop is an object with this data structure:\n    { value, text, ...options }\nwhich is constructed from the props of the chosen <Option> child of this <Select> component.\n\nSo this handler's `optionProps` argument object contains:\n\n  - `text`  - The option's visible text, displayed in the browser.\n  - `value` - The option's invisible internal value.",
          "modifiers": [],
          "params": [
            {
              "name": "optionProps"
            }
          ],
          "returns": null,
          "description": "This handler is attached to `SelectList.onSelect()`, which is attached to `ScrollableList.onSelect()`,\nwhich passes `selectedItem.props.id` as the parameter to this handler.\n\n`selectedItem` is a <ScrollableListItem> instance, and its `id` prop is an object with this data structure:\n    { value, text, ...options }\nwhich is constructed from the props of the chosen <Option> child of this <Select> component.\n\nSo this handler's `optionProps` argument object contains:\n\n  - `text`  - The option's visible text, displayed in the browser.\n  - `value` - The option's invisible internal value."
        },
        {
          "name": "handleFilter",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "ev",
              "type": null
            }
          ],
          "returns": null
        },
        {
          "name": "handleKeyDown",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "ev",
              "type": null
            }
          ],
          "returns": null
        },
        {
          "name": "openWhenTypeAhead",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "typeAhead",
              "type": null
            },
            {
              "name": "value",
              "type": null
            }
          ],
          "returns": null
        },
        {
          "name": "openList",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": null
        },
        {
          "name": "triggerChange",
          "docblock": "Changes the component's currently-selected option(s). This can be caused by:\n\n  - The user clicking an <Option> in the <SelectList>, to select/add that option.\n  - The user pressing the backspace key, to clear the selected option (or delete a chosen option).\n  - The user clicking the \"X\" (delete) button on a <Pill> (when in multi-select mode).\n\nThe `value` argument refers to the `value` prop(s) of the chosen <Option> component(s):\n\n  - In single-select mode, the `value` argument is a single string.\n  - In  multi-select mode, the `value` argument is an array of strings.",
          "modifiers": [],
          "params": [
            {
              "name": "value"
            }
          ],
          "returns": null,
          "description": "Changes the component's currently-selected option(s). This can be caused by:\n\n  - The user clicking an <Option> in the <SelectList>, to select/add that option.\n  - The user pressing the backspace key, to clear the selected option (or delete a chosen option).\n  - The user clicking the \"X\" (delete) button on a <Pill> (when in multi-select mode).\n\nThe `value` argument refers to the `value` prop(s) of the chosen <Option> component(s):\n\n  - In single-select mode, the `value` argument is a single string.\n  - In  multi-select mode, the `value` argument is an array of strings."
        },
        {
          "name": "createCustomEvent",
          "docblock": "Creates a custom event object, suitable for passing to the\nonBlur() and onChange() callback props of this component.",
          "modifiers": [],
          "params": [
            {
              "name": "value"
            }
          ],
          "returns": null,
          "description": "Creates a custom event object, suitable for passing to the\nonBlur() and onChange() callback props of this component."
        },
        {
          "name": "removeMultiItem",
          "docblock": "Removes the specified multi-select item.\nShould only be called when the component is in multi-select mode.",
          "modifiers": [],
          "params": [
            {
              "name": "index"
            }
          ],
          "returns": null,
          "description": "Removes the specified multi-select item.\nShould only be called when the component is in multi-select mode."
        },
        {
          "name": "removeSingleItem",
          "docblock": "Removes this component's current single-select item.\nShould only be called when the component is in single-select mode.",
          "modifiers": [],
          "params": [],
          "returns": null,
          "description": "Removes this component's current single-select item.\nShould only be called when the component is in single-select mode."
        },
        {
          "name": "getTextForValue",
          "docblock": "Finds the <Option> child with the specified `value` prop, and returns its `text` prop.",
          "modifiers": [],
          "params": [
            {
              "name": "value"
            }
          ],
          "returns": null,
          "description": "Finds the <Option> child with the specified `value` prop, and returns its `text` prop."
        },
        {
          "name": "formattedValue",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "filterValue",
              "type": null
            },
            {
              "name": "value",
              "type": null
            }
          ],
          "returns": null
        },
        {
          "name": "renderMultiValues",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "values",
              "type": null
            }
          ],
          "returns": null
        },
        {
          "name": "isMultiValue",
          "docblock": "Determines whether `value` indicates a single value (when the component is operating in single-select mode)\nor multiple values (when the component is operating in multi-select mode).",
          "modifiers": [],
          "params": [
            {
              "name": "value"
            }
          ],
          "returns": null,
          "description": "Determines whether `value` indicates a single value (when the component is operating in single-select mode)\nor multiple values (when the component is operating in multi-select mode)."
        },
        {
          "name": "placeholder",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "placeholder",
              "type": null
            }
          ],
          "returns": null
        },
        {
          "name": "dataAttributes",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": null
        },
        {
          "name": "inputIcon",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "typeAhead",
              "type": null
            }
          ],
          "returns": null
        },
        {
          "name": "eventProps",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": null
        },
        {
          "name": "textboxProps",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": null
        },
        {
          "name": "listDisplayable",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "isTypeAhead",
              "type": null
            }
          ],
          "returns": null
        }
      ],
      "props": {
        "ariaLabel": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": ""
        },
        "children": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "Child components (such as <Option>) for the <SelectList>"
        },
        "customFilter": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "A custom function to filter the child components. Its interface is (text, filter, value) => boolean"
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Is the component disabled?"
        },
        "label": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Label text for the <Textbox>"
        },
        "isLoopable": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Flag to indicite whether select list is loopable while traversing using up and down keys"
        },
        "onBlur": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "A custom callback for the <Textbox>'s Blur event"
        },
        "onChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "A custom callback for when changes occur"
        },
        "onFocus": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "A custom callback for the <Textbox>'s Focus event"
        },
        "onOpen": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "A custom callback for when the dropdown menu opens"
        },
        "onKeyDown": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "A custom callback for when the key is pressed"
        },
        "onLazyLoad": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "A custom callback for when more data needs to be lazy-loaded when the user scrolls the dropdown menu list"
        },
        "onFilter": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "A custom callback for the <Textbox>'s Change event"
        },
        "placeholder": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Placeholder text for the <Textbox>"
        },
        "readOnly": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Is the component read-only?"
        },
        "enableMultiSelect": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Should multi-select mode be enabled?"
        },
        "preventFocusAutoOpen": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Prevents list from automatically opening on focus"
        },
        "value": {
          "type": {
            "name": "custom",
            "raw": "valuePropType"
          },
          "required": false,
          "description": "The selected value(s), when the component is operating in controlled mode"
        },
        "defaultValue": {
          "type": {
            "name": "custom",
            "raw": "valuePropType"
          },
          "required": false,
          "description": "The default selected value(s), when the component is operating in uncontrolled mode"
        },
        "id": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "ID attribute of the component"
        },
        "name": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Name attribute of the component"
        },
        "data-component": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Name of the component"
        },
        "typeAhead": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Are >=3 characters required to trigger the dropdown menu?",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "filterable": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Can the user type a value in the <Textbox> to filter the dropdown menu options?",
          "defaultValue": {
            "value": "true",
            "computed": false
          }
        },
        "isAnyValueSelected": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": ""
        },
        "leftChildren": {
          "type": {
            "name": "node"
          },
          "required": false,
          "description": "Add additional child elements before the input"
        },
        "transparent": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "If true the component input has no border and is transparent"
        }
      },
      "composes": [
        "../textbox"
      ]
    }
  ],
  "src/__experimental__/components/select/select.stories.js": [
    {
      "description": "",
      "displayName": "selectOptions",
      "methods": []
    },
    {
      "description": "",
      "displayName": "defaultComponent",
      "methods": []
    },
    {
      "description": "",
      "displayName": "autoFocusComponent",
      "methods": []
    },
    {
      "description": "",
      "displayName": "customFilterComponent",
      "methods": []
    }
  ]
}