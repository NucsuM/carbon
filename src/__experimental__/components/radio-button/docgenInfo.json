{
  "src/__experimental__/components/radio-button/radio-button-group.component.js": [
    {
      "description": "",
      "displayName": "RadioButtonGroup",
      "methods": [],
      "props": {
        "children": {
          "type": {
            "name": "node"
          },
          "required": true,
          "description": "The RadioButton objects to be rendered in the group"
        },
        "name": {
          "type": {
            "name": "string"
          },
          "required": true,
          "description": "Specifies the name prop to be applied to each button in the group"
        },
        "legend": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "The content for the RadioGroup Legend"
        },
        "labelHelp": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Help text"
        },
        "error": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "bool"
              },
              {
                "name": "string"
              }
            ]
          },
          "required": false,
          "description": "Indicate that error has occurred\n  Pass string to display icon, tooltip and red border\n  Pass true boolean to only display red border"
        },
        "warning": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "bool"
              },
              {
                "name": "string"
              }
            ]
          },
          "required": false,
          "description": "Indicate that warning has occurred\n  Pass string to display icon, tooltip and orange border\n  Pass true boolean to only display orange border"
        },
        "info": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "bool"
              },
              {
                "name": "string"
              }
            ]
          },
          "required": false,
          "description": "Indicate additional information\n  Pass string to display icon, tooltip and blue border\n  Pass true boolean to only display blue border"
        },
        "onBlur": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when each RadioButton is blurred"
        },
        "onChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Callback fired when the user selects a RadioButton"
        },
        "value": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "value of the selected RadioButton"
        },
        "tooltipMessage": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Message to be displayed in a Tooltip when the user hovers over the help icon"
        },
        "inline": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "When true, radiobutton is placed in line",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "labelInline": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "When true, legend is placed in line with an radiobutton",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "labelSpacing": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": 1,
                "computed": "false"
              },
              {
                "value": 2,
                "computed": "false"
              }
            ]
          },
          "required": false,
          "description": "Multiplier for space between label and field (label padding right)"
        },
        "marginBottom": {
          "type": {
            "name": "enum",
            "value": [
              {
                "value": 0,
                "computed": "false"
              },
              {
                "value": 1,
                "computed": "false"
              },
              {
                "value": 2,
                "computed": "false"
              },
              {
                "value": 3,
                "computed": "false"
              },
              {
                "value": 4,
                "computed": "false"
              },
              {
                "value": 5,
                "computed": "false"
              },
              {
                "value": 7,
                "computed": "false"
              }
            ]
          },
          "required": false,
          "description": "Margin bottom, given number will be multiplied by base spacing unit (8)"
        },
        "styleOverride": {
          "type": {
            "name": "shape",
            "value": {
              "root": {
                "name": "union",
                "value": [
                  {
                    "name": "func"
                  },
                  {
                    "name": "object"
                  }
                ],
                "required": false
              },
              "content": {
                "name": "union",
                "value": [
                  {
                    "name": "func"
                  },
                  {
                    "name": "object"
                  }
                ],
                "required": false
              },
              "legend": {
                "name": "union",
                "value": [
                  {
                    "name": "func"
                  },
                  {
                    "name": "object"
                  }
                ],
                "required": false
              }
            }
          },
          "required": false,
          "description": "Allows to override existing component styles",
          "defaultValue": {
            "value": "{}",
            "computed": false
          }
        }
      }
    }
  ],
  "src/__experimental__/components/radio-button/radio-button-svg.component.js": [
    {
      "description": "",
      "displayName": "RadioButtonSvg",
      "methods": []
    }
  ],
  "src/__experimental__/components/radio-button/radio-button.component.js": [
    {
      "description": "",
      "displayName": "RadioButton",
      "methods": [],
      "props": {
        "checked": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Set the value of the radio button"
        },
        "disabled": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Toggles disabling of input"
        },
        "fieldHelpInline": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Displays fieldHelp inline with the radio button"
        },
        "id": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "Unique Identifier for the input. Will use a randomly generated GUID if none is provided"
        },
        "inputWidth": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "number"
              },
              {
                "name": "string"
              }
            ]
          },
          "required": false,
          "description": "Sets percentage-based input width"
        },
        "label": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "The content of the label for the input"
        },
        "labelAlign": {
          "type": {
            "name": "enum",
            "computed": true,
            "value": "OptionsHelper.alignBinary"
          },
          "required": false,
          "description": "Sets label alignment - accepted values: 'left' (default), 'right'"
        },
        "labelWidth": {
          "type": {
            "name": "union",
            "value": [
              {
                "name": "number"
              },
              {
                "name": "string"
              }
            ]
          },
          "required": false,
          "description": "Sets percentage-based label width"
        },
        "name": {
          "type": {
            "name": "string"
          },
          "required": false,
          "description": "The name of the the RadioButton (can also be set via the 'name' prop of the RadioButtonGroup component)"
        },
        "onChange": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Accepts a callback function which can be used to update parent state on change"
        },
        "onBlur": {
          "type": {
            "name": "func"
          },
          "required": false,
          "description": "Accepts a callback function which is triggered on blur event"
        },
        "reverse": {
          "type": {
            "name": "bool"
          },
          "required": false,
          "description": "Reverses label and radio button display",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "size": {
          "type": {
            "name": "enum",
            "computed": true,
            "value": "OptionsHelper.sizesBinary"
          },
          "required": false,
          "description": "Set the size of the radio button to 'small' (16x16 - default) or 'large' (24x24).\nNo effect when using Classic theme."
        },
        "value": {
          "type": {
            "name": "string"
          },
          "required": true,
          "description": "the value of the Radio Button, passed on form submit"
        },
        "children": {
          "type": {
            "name": "custom",
            "raw": "(props, propName, componentName) => {\n  if (props[propName]) {\n    return new Error(\n      `Forbidden prop \\`${propName}\\` supplied to \\`${componentName}\\`. `\n        + 'This component is meant to be used as a self-closing tag. '\n        + 'You should probably use the label prop instead.'\n    );\n  }\n  return null;\n}"
          },
          "required": false,
          "description": ""
        }
      }
    }
  ]
}